"""Loss functions for knowledge tracing models."""

import torch
import torch.nn as nn
import torch.nn.functional as F
from typing import Optional



class FocalLoss(nn.Module):
    """Focal loss for handling class imbalance."""
    
    def __init__(self, gamma: float = 2.0, alpha: float = 1.0):
        super().__init__()
        self.gamma = gamma
        self.alpha = alpha
    
    def forward(self, predictions: torch.Tensor, targets: torch.Tensor) -> torch.Tensor:
        """Compute focal loss.
        
        Args:
            predictions: Predicted probabilities, shape (batch_size, n_cats)
            targets: Ground truth labels, shape (batch_size,)
            
        Returns:
            Focal loss value
        """
        # Cross entropy loss
        ce_loss = F.cross_entropy(predictions, targets, reduction='none')
        
        # Convert to probabilities
        pt = torch.exp(-ce_loss)
        
        # Focal loss
        focal_loss = self.alpha * (1 - pt) ** self.gamma * ce_loss
        
        return focal_loss.mean()


class WeightedCrossEntropyLoss(nn.Module):
    """Weighted cross-entropy loss for class imbalance."""
    
    def __init__(self, class_weights: Optional[torch.Tensor] = None):
        super().__init__()
        self.class_weights = class_weights
    
    def forward(self, predictions: torch.Tensor, targets: torch.Tensor) -> torch.Tensor:
        """Compute weighted cross-entropy loss.
        
        Args:
            predictions: Predicted logits, shape (batch_size, n_cats)
            targets: Ground truth labels, shape (batch_size,)
            
        Returns:
            Weighted cross-entropy loss
        """
        return F.cross_entropy(predictions, targets, weight=self.class_weights)